{"version":3,"sources":["OneSemester.tsx","Multisemester.tsx","SingleSemester.tsx","Globals.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Semester_MS","course_set","semester_number","userSemesters","useState","creditSum","addSum","useEffect","forEach","course","v","crsCredits","Course_MS","crsName","crsDescription","className","map","index","Semester_SS","updateSemesters","Course_SS","type","onClick","sem_num","course_name","modifiedSemesterList","semester","push","splice","remove_class","length","remove_allclass","MultiSemester","creditTotal","addTotal","SemesterCount","addCount","totalcredits","console","log","empty_sem","add_empty_semester","alert","SingleSemester","current_semester_num","changeSemNum","inpu","setInpu","addCourse","entered_id","new_crs","data","courseList","id","name","parseInt","credits","remove_semester","Form","onSubmit","event","preventDefault","Group","Label","Autocomplete","onChange","value","disablePortal","options","id_list","getAllCourses","renderInput","params","TextField","size","undefined","variant","label","placeholder","Button","example_courses","semester_list","App","show","setShow","mainViewWidth","setWidth","src","logo","alt","Col","md","Offcanvas","placement","scroll","backdrop","onHide","Header","closeButton","Title","Body","Tab","Container","defaultActiveKey","Nav","Item","Link","eventKey","Content","Pane","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e6b7823.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n\n//Created a type to define the traits of a Course\nexport type CourseIntf = {\n    crsName: string,\n    crsDescription: string,\n    crsCredits: number,\n    semester_number?: number\n}\n\n\n//Created a type to define the traits of a Semester\nexport type SemesterIntf = {\n    course_set: CourseIntf[],\n    semester_number: number,\n    credits?: number\n}\n\n\ninterface MS_Semester{\n    course_set: CourseIntf[];\n    semester_number:number;\n    userSemesters: SemesterIntf[];\n    updateSemesters: (s : SemesterIntf[])=>void;\n}\n//Function to create, display, and modify a Semester (This version is for when viewing multiple semesters, as denoted by MS for 'Multi Semester')\nexport function Semester_MS ({ course_set, semester_number, userSemesters }:MS_Semester):JSX.Element{\n\n    //Variable to manage the credit total per semester\n    const [creditSum, addSum] = useState(0);\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: CourseIntf) => {\n            addSum(v => v + course.crsCredits);\n        });\n    }, [semester_number, userSemesters, course_set]);\n\n\n    //Function Defining the display characteristics of a Course in the Multi Semester View\n    const Course_MS: FunctionComponent<CourseIntf> = ({ crsName, crsDescription, crsCredits }) =>\n        <tr>\n            <td><b>{crsName}:</b> {crsDescription}</td>\n            <td className=\"text-center\">{crsCredits}</td>\n        </tr>\n        ;\n\n    //Return Statement for Multi Semester version of the Semester\n    return <div className=\"col-md-6\">\n        <h2 className=\"Semester\"><b>Semester {semester_number}</b></h2>\n\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th className=\"text-center\">Course</th>\n                    <th className=\"text-center\">Credits</th>\n                </tr>\n            </thead>\n\n            <tbody>\n\n                {course_set.map((course: CourseIntf, index: number) => {\n                    return <Course_MS key={index} crsName={course.crsName} crsDescription={course.crsDescription} crsCredits={course.crsCredits} />;\n                })}\n\n            </tbody>\n            <tfoot>\n                <tr>\n                    <td><b>Total Credits</b></td>\n                    <td><b>{creditSum}</b></td>\n                </tr>\n            </tfoot>\n        </table>\n    </div>\n    ;\n}\n\n\n\ninterface SS_Semester{\n    course_set: CourseIntf[];\n    semester_number:number;\n    userSemesters: SemesterIntf[];\n    updateSemesters: (s : SemesterIntf[])=>void;\n}\n\n//Function to create, display, and modify a Semester (This version is for when editing one semester at a time, as denoted by SS for 'Single Semester')\nexport function Semester_SS({ course_set, semester_number, userSemesters, updateSemesters }:SS_Semester) :JSX.Element {\n\n    //Variable to manage the credit total per semester\n    const [creditSum, addSum] = useState(0);\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: CourseIntf) => {\n            addSum(v => v + course.crsCredits);\n        });\n        \n    }, [semester_number, course_set, userSemesters]);\n\n    \n    //Function to removes all the courses from Semester\n    const remove_allclass = (sem_num: number): void => {\n        const modifiedSemesterList:SemesterIntf[] = [];\n        userSemesters.forEach((semester:SemesterIntf)=>{\n            modifiedSemesterList.push(semester);\n        });\n        modifiedSemesterList[sem_num - 1].course_set.splice(0, modifiedSemesterList[sem_num - 1].course_set.length);\n        updateSemesters(modifiedSemesterList);\n        addSum(0);\n    };\n\n    //Function to remove a single course from the Semester\n    const remove_class = (sem_num: number, course_name: string): void =>{\n        const modifiedSemesterList:SemesterIntf[] = [];\n        userSemesters.forEach((semester:SemesterIntf)=>{\n            modifiedSemesterList.push(semester);\n        });\n        modifiedSemesterList[sem_num-1].course_set.forEach((course: CourseIntf, index: number)=>{\n            if(course.crsName == course_name){\n                modifiedSemesterList[sem_num-1].course_set.splice(index,1);  \n                updateSemesters(modifiedSemesterList);\n                addSum(v => v - course.crsCredits);          \n            }\n        });\n    };\n\n\n\n    //Function Defining the display characteristics of a Course in the Single Semester View\n    const Course_SS: FunctionComponent<CourseIntf> = ({ crsName, crsDescription, crsCredits, semester_number }) =>\n        <tr>\n            <td><b>{crsName}:</b> {crsDescription}</td>\n            <td className=\"text-center\">{crsCredits}</td>\n            <td className=\"editcourse\">\n                <button type=\"button\" className=\"btn btn-outline-secondary m-1\">Edit</button>\n                <button type=\"button\" className=\"btn btn-outline-danger m-1\" onClick={() => remove_class(semester_number as number,crsName)}>X</button>\n            </td>\n        </tr>\n    ;\n\n\n    //Return Statement for Single Semester version of the Semester\n    return <div className=\"\">\n        <table className=\"table\">\n            <thead>\n                <h2 className=\"Semester\"><b>Semester {semester_number}</b></h2>\n                <tr>\n                    <th className=\"text-center\">Courses</th>\n                    <th className=\"text-center\">Credit</th>\n                    <th className=\"Actions\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {course_set.map((course: CourseIntf, index: number) => {\n                    return <Course_SS key={index} crsName={course.crsName} crsDescription={course.crsDescription} crsCredits={course.crsCredits} semester_number={semester_number} />;\n                })}\n            </tbody >\n        </table >\n        <div>\n            <b>Total Credits:  </b>\n            <b>{creditSum}</b>\n\n        </div>\n\n        <div className=\"text-center\">\n            <button type=\"button\" className=\"btn btn-danger m-1\" onClick={() => remove_allclass(semester_number as number)}>Remove all courses</button>\n\n        </div>\n    </div >\n    ;\n}","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport { SemesterIntf, CourseIntf } from \"./OneSemester\";\nimport { Semester_MS } from \"./OneSemester\";\n\ninterface Multi_Semester_View {\n    userSemesters: SemesterIntf[];\n    updateSemesters: (s : SemesterIntf[])=>void;\n}\n\nexport function MultiSemester({userSemesters, updateSemesters}:Multi_Semester_View): JSX.Element {\n\n    //Variable to manage the credit total per semester\n    const [creditTotal, addTotal] = useState(0);\n    const [SemesterCount, addCount] = useState(userSemesters.length);\n\n    //Function to removes all the Semesters from the plan\n    function remove_all_semesters () {\n        const empty_sem: SemesterIntf = {course_set:[], semester_number: 1};\n        updateSemesters([empty_sem]);\n        addTotal(0);\n        console.log(SemesterCount);\n    }\n\n    //Function to removes all the Semesters from the plan\n    const add_empty_semester = (): void => {\n        console.log(userSemesters[userSemesters.length-1].semester_number+1);\n        const empty_sem: SemesterIntf = { course_set: [], semester_number: userSemesters[userSemesters.length-1].semester_number + 1};\n        updateSemesters([...userSemesters, empty_sem]);\n        addCount(userSemesters.length);\n    };\n\n    const reset =(): void =>{\n        alert(\"You have unsaved changes, are you sure you want to reset?\");\n    };\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addTotal(0);\n        addCount(userSemesters.length);\n        userSemesters.forEach((semester: SemesterIntf) => {\n            semester.course_set.forEach((course: CourseIntf) => {\n                addTotal(totalcredits => totalcredits + course.crsCredits);\n            });\n        });\n    }, [userSemesters]);\n\n    return (\n\n        <div className=\"container-fluid padding\">\n\n            <div className=\"row padding\">\n                {userSemesters.map((semester: SemesterIntf, index: number) => {\n                    return <Semester_MS key={index} course_set={semester.course_set} semester_number={semester.semester_number} userSemesters={userSemesters} updateSemesters={updateSemesters}/>;\n                })}\n            </div>\n\n            <div className=\"col text-center\">\n                <p><h3>Total Credits: </h3><b>{creditTotal}</b></p>\n                <button type=\"button\" className=\"btn btn-primary btn-lg m-3\" onClick={() => add_empty_semester()}>Add Semester</button>\n                <button type=\"button\" className=\"btn btn-danger btn-lg m-3\" onClick={() => remove_all_semesters()}>Clear Plan</button>\n                <form>\n                    <button type=\"submit\" className=\"btn btn-secondary btn-lg m-3\" onClick={()=> reset()}>Reset</button>\n                </form>\n            </div>\n        </div>\n    );\n}\n\n//export default MultiSemester;","import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport \"./App.css\";\nimport { Semester_SS, SemesterIntf, CourseIntf } from \"./OneSemester\";\nimport data from \"./assets/data.json\";\n\ninterface Single_Semester_View {\n    userSemesters: SemesterIntf[];\n    updateSemesters: (s: SemesterIntf[]) => void;\n}\n\nexport function SingleSemester({ userSemesters, updateSemesters }: Single_Semester_View): JSX.Element {\n\n    //Constants-------------------\n    const [current_semester_num, changeSemNum] = useState(0);\n    const [inpu, setInpu] = useState<string>(\"\");\n\n\n    //Functions-------------------\n\n    //Removes the semester\n    const remove_semester = () => {\n        const modifiedSemesterList: SemesterIntf[] = [];\n        userSemesters.forEach((semester: SemesterIntf) => {\n            modifiedSemesterList.push(semester);\n        });\n        modifiedSemesterList.splice(current_semester_num, 1);\n        modifiedSemesterList.forEach((semester: SemesterIntf, index: number) => {\n            semester.semester_number = index + 1;\n        });\n        updateSemesters(modifiedSemesterList);\n        if (current_semester_num < userSemesters.length - 1) {\n            console.log(current_semester_num);\n        }\n\n    };\n\n    //Returns array of class 'id's for auto fill\n    function getAllCourses(): string[] {\n        const id_list: string[] = [];\n        data.map((courseList) => {\n            id_list.push(courseList.id);\n        });\n        return id_list;\n    }\n\n    //adds a course to the current semester\n    function addCourse(entered_id: string): void {\n        let new_crs: CourseIntf = { crsName: \"\", crsDescription: \"\", crsCredits: 0 };\n        const modifiedSemesterList: SemesterIntf[] = [];\n        userSemesters.forEach((semester: SemesterIntf) => {\n            modifiedSemesterList.push(semester);\n        });\n        data.map((courseList) => {\n            if (courseList.id == entered_id) {\n                new_crs = { crsName: courseList.id, crsDescription: courseList.name, crsCredits: parseInt(courseList.credits, 10) };\n                modifiedSemesterList[current_semester_num].course_set.push(new_crs);\n                updateSemesters(modifiedSemesterList);\n            }\n        });\n    }\n\n\n    //Return Statement-------------\n    return (\n        <>\n            <div className=\"container-fluid padding text-left\">\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <div className=\"text-center\">\n                            <button type=\"button\" className=\"col-2 btn btn-primary m-1\"\n                                onClick={() => changeSemNum(v => v - 1)}>Previous</button>\n                            <button type=\"button\" className=\"col-2 btn btn-danger m-1\"\n                                onClick={() => remove_semester()}>Remove</button>\n                            <button type=\"button\" className=\"col-2 btn btn-primary m-1\"\n                                onClick={() => changeSemNum(v => v + 1)}>Next</button>\n                        </div>\n                        <Semester_SS course_set={userSemesters[current_semester_num].course_set}\n                            semester_number={userSemesters[current_semester_num].semester_number}\n                            userSemesters={userSemesters} updateSemesters={updateSemesters}\n                        />\n                    </div>\n                    <div className=\"col-3 text-center\">\n                        <h2 className=\"text-success mt-5\"><b>Add Course</b></h2>\n                        <Form id=\"searchBar\" onSubmit={(event) => {\n                            addCourse(inpu);\n                            event.preventDefault();\n                        }}>\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label>Enter the desired course code:</Form.Label>\n                                <Autocomplete onChange={(event, value) => {\n                                    setInpu(value as string); event.preventDefault();\n                                }} disablePortal id=\"combo-box-demo\" options={getAllCourses()} renderInput={(params) => <TextField {...params} size={undefined} variant='outlined' label=\"Enter Course Code\" placeholder=\"CISC\" />} />\n                            </Form.Group>\n                            <Button onClick={() => {\n                                addCourse(inpu);\n                            }}>\n                                Add Course\n                            </Button>\n\n                        </Form>\n\n                    </div>\n\n                    <div className=\"col-3\">\n                        <h3 className=\"text-center text-warning mt-5\"><b>Requirements</b></h3>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}","//import React, { FunctionComponent } from \"react\";\nimport \"./App.css\";\nimport { SemesterIntf, CourseIntf } from \"./OneSemester\";\n\nexport const example_courses: CourseIntf[] = [{ crsName: \"EGGG101\", crsDescription: \"Introduction to Engineering\", crsCredits: 2 }, { crsName: \"CISC108\", crsDescription: \"Introduction to Somputer Science I\", crsCredits: 3 }, { crsName: \"MATH241\", crsDescription: \"Analytic Geometry and Calculus A\", crsCredits: 4 }, { crsName: \"ENGL110\", crsDescription: \"Seminar in Composition\", crsCredits: 3 }, { crsName: \"Breadth Req. I\", crsDescription: \"Breadth Requirement Elective (1/5)\", crsCredits: 3 },\n    { crsName: \"CISC 181\", crsDescription: \" Introduction to Computer Science II\", crsCredits: 3 }, { crsName: \"MATH 242\", crsDescription: \"Analytic Geometry & Calculus B\", crsCredits: 4 }, { crsName: \"CISC 210\", crsDescription: \"Introduction to Systems Programming\", crsCredits: 3 }, { crsName: \"Laboratory Science I\", crsDescription: \"Laboratory Science (1/3)\", crsCredits: 4 }, { crsName: \"Breadth Req. II\", crsDescription: \"Breadth Requirement Elective (2/5)\", crsCredits: 3 },\n    { crsName: \"CISC 220\", crsDescription: \"Data Structures\", crsCredits: 3 }, { crsName: \"CISC 260\", crsDescription: \"Machine Org. & Assembly Language\", crsCredits: 3 }, { crsName: \"MATH 210\", crsDescription: \"Discrete Mathematics I\", crsCredits: 3 }, { crsName: \"Laboratory Science II\", crsDescription: \"Laboratory Science (2/3)\", crsCredits: 4 }, { crsName: \"Breadth Req. III\", crsDescription: \"Breadth Requirement Elective (3/5)\", crsCredits: 3 },\n    { crsName: \"CISC 355\", crsDescription: \"Computers, Ethics & Society\", crsCredits: 3 }, { crsName: \"CISC 275\", crsDescription: \"Introduction to Software Engineering\", crsCredits: 3 }, { crsName: \"MATH 205\", crsDescription: \"Statistical Methods\", crsCredits: 3 }, { crsName: \"Laboratory Science III\", crsDescription: \"Laboratory Science (3/3)\", crsCredits: 4 }, { crsName: \"Breadth Req. IV\", crsDescription: \"Breadth Requirement Elective (4/5)\", crsCredits: 3 },\n    { crsName: \"CISC 320\", crsDescription: \"Introduction to Algorithms\", crsCredits: 3 }, { crsName: \"CISC 361\", crsDescription: \"Operating Systems\", crsCredits: 3 }, { crsName: \"CISC 304\", crsDescription: \"Logic and Programming\", crsCredits: 3 }, { crsName: \"Concentration Elective I\", crsDescription: \"Concentration Elective (1/4)\", crsCredits: 3 }, { crsName: \"General Elective I\", crsDescription: \"General Elective (1/6)\", crsCredits: 3 },\n    { crsName: \"CISC 372\", crsDescription: \"Parallel Computing\", crsCredits: 3 }, { crsName: \"CISC 303\", crsDescription: \"Automata Theory\", crsCredits: 3 }, { crsName: \"ENGL 312\", crsDescription: \"Written Communication in Business\", crsCredits: 3 }, { crsName: \"Concentration Elective II\", crsDescription: \"Concentration Elective (2/4)\", crsCredits: 3 }, { crsName: \"General Elective II\", crsDescription: \"General Elective (2/6)\", crsCredits: 3 },\n    { crsName: \"CISC498\", crsDescription: \"Computer Science Design Project I\", crsCredits: 3 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective I\", crsCredits: 3 }, { crsName: \"Concentration Elective III\", crsDescription: \"Concentration Elective (3/4)\", crsCredits: 3 }, { crsName: \"General Elective III\", crsDescription: \"General Elective (3/6)\", crsCredits: 3 }, { crsName: \"General Elective IV\", crsDescription: \"General Elective (4/6)\", crsCredits: 3 },\n    { crsName: \"CISC499\", crsDescription: \"Computer Science Design Project II\", crsCredits: 3 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective II\", crsCredits: 3 }, { crsName: \"Concentration Elective IV\", crsDescription: \"Concentration Elective (4/4)\", crsCredits: 3 }, { crsName: \"General Elective V\", crsDescription: \"General Elective (5/6)\", crsCredits: 3 }, { crsName: \"General Elective VI\", crsDescription: \"General Elective (6/6)\", crsCredits: 3 }];\n\nconst example_semester1: SemesterIntf = { course_set: [example_courses[0], example_courses[1], example_courses[2], example_courses[3], example_courses[4]], semester_number: 1 };\nconst example_semester2: SemesterIntf = { course_set: [example_courses[5], example_courses[6], example_courses[7], example_courses[8], example_courses[9]], semester_number: 2 };\nconst example_semester3: SemesterIntf = { course_set: [example_courses[10], example_courses[11], example_courses[12], example_courses[13], example_courses[14]], semester_number: 3 };\nconst example_semester4: SemesterIntf = { course_set: [example_courses[15], example_courses[16], example_courses[17], example_courses[18], example_courses[19]], semester_number: 4 };\nconst example_semester5: SemesterIntf = { course_set: [example_courses[20], example_courses[21], example_courses[22], example_courses[23], example_courses[24]], semester_number: 5 };\nconst example_semester6: SemesterIntf = { course_set: [example_courses[25], example_courses[26], example_courses[27], example_courses[28], example_courses[29]], semester_number: 6 };\nconst example_semester7: SemesterIntf = { course_set: [example_courses[30], example_courses[31], example_courses[32], example_courses[33], example_courses[34]], semester_number: 7 };\nconst example_semester8: SemesterIntf = { course_set: [example_courses[35], example_courses[36], example_courses[37], example_courses[38], example_courses[39]], semester_number: 8 };\n\nexport const semester_list: SemesterIntf[] = [example_semester1, example_semester2, example_semester3, example_semester4, example_semester5, example_semester6, example_semester7, example_semester8];\n\nexport const user_semesters: SemesterIntf[] = [];","export default __webpack_public_path__ + \"static/media/logo.4f3a436c.png\";","import React, { useState} from \"react\";\nimport { Tab, Nav, Offcanvas, Button, Col } from \"react-bootstrap\";\nimport \"./App.css\";\nimport {MultiSemester} from \"./Multisemester\";\nimport {SingleSemester} from \"./SingleSemester\";\nimport { SemesterIntf} from \"./OneSemester\";\nimport {semester_list} from \"./Globals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./logo.png\";\n\nfunction App(): JSX.Element {\n\n    const [userSemesters, updateSemesters] = useState<SemesterIntf[]>(semester_list);\n\n\n    const [show, setShow] = useState(false);\n    const [mainViewWidth, setWidth] = useState(12);\n\n    function hideDegReqs():void{\n        setShow(false);\n        setWidth(12);\n    }\n\n    function showDegReqs():void{\n        setShow(true);\n        setWidth(9);\n    }\n\n    return (\n        <div className=\"App\">\n\n            <header className=\"App-header\">\n                <h1 >UD CIS Scheduler</h1>\n            </header>\n\n            <div className=\"text-left\"><img className=\"logo\" src={logo} alt=\"Logo\" /></div>\n            <div className=\"text-center\"></div>\n\n            <hr></hr>\n\n            <Col md={mainViewWidth}>\n\n                <Offcanvas show={show} placement=\"end\" scroll={true} backdrop={true} onHide={() => hideDegReqs()}>\n                    <Offcanvas.Header closeButton>\n                        <Offcanvas.Title>Degree Requirements</Offcanvas.Title>\n                    </Offcanvas.Header>\n                    <Offcanvas.Body>\n                        This will eventually be an active list. indicating which of the\n                        degree requirements have been met by the current plan and which have not\n                    </Offcanvas.Body>\n                </Offcanvas>\n\n                <Tab.Container defaultActiveKey=\"first\">\n                    <Nav variant=\"pills\" className=\"flex-row\">\n                        <Col md={10}>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"first\">My Plan</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"second\">Edit Semesters</Nav.Link>\n                            </Nav.Item>\n                        </Col>\n\n                        <Col md={2} className=\"text-center padding\">\n                            <Button variant=\"primary\" onClick={() => showDegReqs()}>\n                                View Degree Requirements\n                            </Button>\n                        </Col>\n                    </Nav>\n\n                    <hr></hr>\n\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"first\">\n                            <MultiSemester userSemesters={userSemesters} updateSemesters={updateSemesters} />\n                        </Tab.Pane>\n                        \n                        <Tab.Pane eventKey=\"second\">\n                            <SingleSemester userSemesters={userSemesters} updateSemesters={updateSemesters} />\n                        </Tab.Pane>\n\n                    </Tab.Content>\n                </Tab.Container>\n\n            </Col>\n\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}