{"version":3,"sources":["components/MultiSemesterDisplay.tsx","components/MyPlan_Pane.tsx","components/gotToTop.tsx","components/SingleSemesterDisplay.tsx","components/modalHelper.tsx","components/EditSemesters_Pane.tsx","assets/Globals.tsx","components/WelcomeAndHelp_Pane.tsx","components/DegreeRequirements_Section.tsx","components/App_Navbar.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MultiSemesterDisplay","course_set","semester_number","userSemesters","useState","creditSum","addSum","Course_MS","crsName","crsDescription","crsCredits","className","useEffect","forEach","course","v","map","index","crsPrereqs","MyPlan_Pane","updateSemesters","creditTotal","addTotal","length","SemesterCount","addCount","semester","totalcredits","type","onClick","console","log","empty_sem","add_empty_semester","alert","ScrollToTop","isVisible","setIsVisible","toggleVisibility","window","pageYOffset","addEventListener","scrollTo","top","behavior","src","alt","SingleSemesterDisplay","Course_SS","sem_num","course_name","modifiedSemesterList","push","splice","remove_class","remove_all_classes","Mod","showModal","setShow","crsID","handleClose","courseDescription","setCourseDescription","courseName","setCourseName","courseCredits","setCourseCredits","coursePrereqs","setCoursePrereqs","data","courseList","id","description","name","credits","prereqs","Modal","show","onHide","Header","closeButton","Title","Body","value","onChange","e","target","Footer","Button","variant","EditSemesters_Pane","current_semester_num","changeSemNum","newClassInput","updateInput","showDuplicateCourseError","setShowDupCourseErr","showPrereqCourseErr","setPrereqCourseErr","setShowModal","courseInfoName","displayName","courseInfoDescription","displayDescription","courseInfoCredits","displayCredits","courseInfoPrereqs","displayPrereqs","addCourse","entered_id","new_crs","prereqsString","canAddCourse","prereqsArray","split","prereqCourseID","checkForPrereqs","newCourseID","checkForDuplicates","parseInt","remove_semester","Form","onSubmit","event","preventDefault","Group","Label","Autocomplete","disablePortal","options","id_list","getAllCourses","renderInput","params","TextField","size","undefined","label","placeholder","Toast","bg","onClose","delay","autohide","example_courses","semester_list","WelcomeAndHelp_Pane","DegreeRequirements_Section","setWidth","Offcanvas","placement","scroll","backdrop","App_Navbar","Nav","role","Col","md","Row","Item","Link","eventKey","App","DegreeReq_View_State","toggleDegreeReqView","app_Content_Width","setAppContentWidth","logo","toast","Tab","Container","defaultActiveKey","Content","Pane","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d4a360a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\n\n\ninterface MS_Semester{\n    course_set: Course[];\n    semester_number:number;\n    userSemesters: Semester[];\n    updateSemesters: (s : Semester[])=>void;\n}\n\nexport function MultiSemesterDisplay ({ course_set, semester_number, userSemesters }:MS_Semester):JSX.Element{\n\n    //Constants-------------------\n    const [creditSum, addSum] = useState(0);\n\n\n    //Functions-------------------\n\n    //Function Defining the display characteristics of a Course in the Multi Semester View\n    function Course_MS({ crsName, crsDescription, crsCredits }: Course) {\n        return (\n            <tr>\n                <td><b>{crsName}:</b> {crsDescription}</td>\n                <td className=\"text-center\">{crsCredits}</td>\n            </tr>\n        );\n    }\n    \n\n    //Use Effect-------------------\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: Course) => {\n            addSum(v => v + course.crsCredits);\n        });\n    }, [semester_number, userSemesters, course_set]);\n\n    \n    //Return Statement-------------\n    return <div className=\"col-md-6\">\n        <h2 className=\"Semester\"><b>Semester {semester_number}</b></h2>\n\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th className=\"text-center\">Course</th>\n                    <th className=\"text-center\">Credits</th>\n                </tr>\n            </thead>\n\n            <tbody>\n\n                {course_set.map((course: Course, index: number) => {\n                    return <Course_MS key={index} crsName={course.crsName} crsDescription={course.crsDescription} crsCredits={course.crsCredits} crsPrereqs={course.crsPrereqs} semester_number={semester_number} />;\n                })}\n\n            </tbody>\n            <tfoot>\n                <tr>\n                    <td><b>Total Credits</b></td>\n                    <td><b>{creditSum}</b></td>\n                </tr>\n            </tfoot>\n        </table>\n    </div>\n    ;\n}","import React, {useState, useEffect} from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\nimport { MultiSemesterDisplay } from \"./MultiSemesterDisplay\";\n\ninterface Multi_Semester_View {\n    userSemesters: Semester[];\n    updateSemesters: (s : Semester[])=>void;\n}\n\nexport function MyPlan_Pane({userSemesters, updateSemesters}:Multi_Semester_View): JSX.Element {\n\n    //Constants-------------------\n    const [creditTotal, addTotal] = useState(0);\n    const [SemesterCount, addCount] = useState(userSemesters.length);\n\n\n    //Functions-------------------\n\n    //Removes all the Semesters from the plan\n    function remove_all_semesters () {\n        const empty_sem: Semester = {course_set:[], semester_number: 1};\n        updateSemesters([empty_sem]);\n        addTotal(0);\n        console.log(SemesterCount);\n    }\n\n    //Adds an empty Semester to the plan\n    function add_empty_semester(): void{\n        console.log(userSemesters[userSemesters.length-1].semester_number+1);\n        const empty_sem: Semester = { course_set: [], semester_number: userSemesters[userSemesters.length-1].semester_number + 1};\n        updateSemesters([...userSemesters, empty_sem]);\n        addCount(userSemesters.length);\n    }\n\n    //Alerts user before reloading \n    function reset_alert(): void{\n        alert(\"All unsaved changes will be lost, are you sure you still want to reset?\");\n    }\n\n\n    //Use Effect-------------------\n\n    //Updates the Sum total at start and when the array 'userSemesters' changes\n    useEffect(() => {\n        addTotal(0);\n        addCount(userSemesters.length);\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) => {\n                addTotal(totalcredits => totalcredits + course.crsCredits);\n            });\n        });\n    }, [userSemesters]);\n\n\n    //Return Statement---------------\n    return (\n\n        <div className=\"container-fluid padding\" >\n\n            <div className=\"row padding\" data-testid=\"semester-list\">\n                {userSemesters.map((semester: Semester, index: number) => {\n                    return <MultiSemesterDisplay key={index} course_set={semester.course_set} semester_number={semester.semester_number} userSemesters={userSemesters} updateSemesters={updateSemesters}/>;\n                })}\n            </div>\n\n            <div className=\"text-center\">\n                <p><h3>Total Credits: </h3><b>{creditTotal}</b></p>\n                <div className=\"row\">\n                    <div className=\"col-4\">\n                        <button type=\"button\" className=\"btn btn-primary btn-lg btn-block\"  data-testid=\"Add-Semester\" \n                            onClick={() => add_empty_semester()}>Add Semester</button>\n                    </div>\n                    <div className=\"col-4\">\n                        <button type=\"button\" className=\"btn btn-danger btn-lg btn-block\" onClick={() => remove_all_semesters()}>Clear Plan</button>\n                    </div>\n                    <div className=\"col-4\">\n                        <form>\n                            <button type=\"submit\" className=\"btn btn-secondary btn-lg btn-block\" onClick={()=> reset_alert()}>Reset</button>\n                        </form>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useEffect, useState } from \"react\";\n\nexport default function ScrollToTop() :JSX.Element{\n    const [isVisible, setIsVisible] = useState(false);\n  \n    // Show button when page is scorlled upto given distance\n    const toggleVisibility = () => {\n        if (window.pageYOffset > 300) {\n            setIsVisible(true);\n        } else {\n            setIsVisible(false);\n        }\n    };\n    \n    // Set the top cordinate to 0\n    // make scrolling smooth\n    const scrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        });\n    };\n    \n    useEffect(() => {\n        window.addEventListener(\"scroll\", toggleVisibility);\n    }, []);\n    \n    return (\n        <div className=\"scroll-to-top\">\n            {isVisible && \n            <div onClick={scrollToTop}>\n                <img src='https://i.postimg.cc/44Ytsk8Z/top-arrow-emoj.png' alt='Go to top'/>\n            </div>}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\n\n\ninterface SS_Semester{\n    course_set: Course[];\n    semester_number:number;\n    userSemesters: Semester[];\n    updateSemesters: (s : Semester[])=>void;\n}\n\nexport function SingleSemesterDisplay({ course_set, semester_number, userSemesters, updateSemesters }:SS_Semester) :JSX.Element {\n\n    //Constants-------------------\n    const [creditSum, addSum] = useState(0);\n\n\n    //Functions-------------------\n    \n    //Removes all the courses from the current Semester\n    function remove_all_classes(sem_num: number): void {\n        const modifiedSemesterList:Semester[] = [];\n        userSemesters.forEach((semester:Semester)=>{\n            modifiedSemesterList.push(semester);\n        });\n        modifiedSemesterList[sem_num - 1].course_set.splice(0, modifiedSemesterList[sem_num - 1].course_set.length);\n        updateSemesters(modifiedSemesterList);\n        addSum(0);\n    }\n\n    //Remove a single course from the current Semester\n    function remove_class(sem_num: number, course_name: string): void{\n        const modifiedSemesterList:Semester[] = [];\n        userSemesters.forEach((semester:Semester)=>{\n            modifiedSemesterList.push(semester);\n        });\n        modifiedSemesterList[sem_num-1].course_set.forEach((course: Course, index: number)=>{\n            if(course.crsName == course_name){\n                modifiedSemesterList[sem_num-1].course_set.splice(index,1);  \n                updateSemesters(modifiedSemesterList);\n                addSum(v => v - course.crsCredits);          \n            }\n        });\n    }\n\n    //Defining the display characteristics of a Course in the Single Semester View\n    function Course_SS({ crsName, crsDescription, crsCredits, semester_number }:Course):JSX.Element{\n        return (\n            <tr className=\"w-100\">\n                <td><b>{crsName}:</b> {crsDescription}</td>\n                <td className=\"text-center\">{crsCredits}</td>\n                <td className=\"editcourse\">\n                    <button type=\"button\" className=\"btn btn-outline-secondary m-1\">Edit</button>\n                    <button type=\"button\" className=\"btn btn-outline-danger m-1\" data-testid=\"Remove-Course\"\n                        onClick={() => remove_class(semester_number as number, crsName)}>X</button>\n                </td>\n            </tr>\n        );\n    }\n\n\n    //Use Effect-------------------\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: Course) => {\n            addSum(v => v + course.crsCredits);\n        });\n        \n    }, [semester_number, course_set, userSemesters]);\n\n    \n    //Return Statement-------------\n    return <div className=\"w-100\">\n        <table className=\"table\">\n            <thead>\n                <h2 className=\"Semester\"><b>Semester {semester_number}</b></h2>\n                <tr>\n                    <th className=\"text-center\">Courses</th>\n                    <th className=\"text-center\">Credit</th>\n                    <th className=\"Actions\">Actions</th>\n                </tr>\n            </thead>\n            <tbody data-testid=\"course-list\">\n                {course_set.map((course: Course, index: number) => {\n                    return <Course_SS key={index} crsName={course.crsName} crsDescription={course.crsDescription} crsCredits={course.crsCredits} semester_number={semester_number} crsPrereqs={course.crsPrereqs}  />;\n                })}\n            </tbody >\n        </table >\n        <div>\n            <b>Total Credits:  </b>\n            <b>{creditSum}</b>\n\n        </div>\n\n        <div className=\"text-center\">\n            <button type=\"button\" className=\"btn btn-danger m-1\" onClick={() => remove_all_classes(semester_number as number)}>Remove all courses</button>\n\n        </div>\n    </div >\n    ;\n}","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport data from \"../assets/data.json\";\n\n\ninterface Modal_Helper_Intf {\n    showModal: boolean;\n    setShow: (b: boolean) => void;\n    crsID: string;\n}\nexport function Mod({ showModal, setShow, crsID }: Modal_Helper_Intf): JSX.Element {\n    const handleClose = () => setShow(false);\n    const [courseDescription, setCourseDescription] = useState(\"courseDescription\");\n    const [courseName, setCourseName] = useState(\"courseName\");\n    const [courseCredits, setCourseCredits] = useState(\"courseCredits\");\n    const [coursePrereqs, setCoursePrereqs] = useState(\"coursePrereqs\");\n    //const handleShow = () => setShow(true);\n    //console.log(crsName);\n\n    function saveData(): void {\n        data.map((courseList) => {\n            if (courseList.id == crsID) {\n                courseList.description = courseDescription;\n                courseList.name = courseName;\n                courseList.credits = courseCredits;\n                courseList.prereqs = coursePrereqs;\n                setShow(false);\n            }\n        });\n    }\n    useEffect(() => {\n        data.map((courseList) => {\n            if (courseList.id == crsID) {\n                setCourseDescription(courseList.description);\n                setCourseName(courseList.name);\n                setCourseCredits(courseList.credits);\n                setCoursePrereqs(courseList.prereqs);\n            }\n        });\n    }, [crsID]);\n    return (\n        <Modal show={showModal} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Welcome to the editing window</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <form>\n                        <input id=\"DescriptionInput\" type=\"text\" value={courseDescription} onChange={(e) => setCourseDescription(e.target.value)} />\n                    </form>\n                    <form>\n                        <input id=\"NameInput\" type=\"text\" value={courseName} onChange={(e) => setCourseName(e.target.value)} />\n                    </form>\n                    <form>\n                        <input id=\"CreditInput\" type=\"text\" value={courseCredits} onChange={(e) => setCourseCredits(e.target.value)} />\n                    </form>\n                    <form>\n                        <input id=\"PrereqsInput\" type=\"text\" value={coursePrereqs} onChange={(e) => setCoursePrereqs(e.target.value)} />\n                    </form>\n                    <button type=\"submit\" onClick={() => saveData()}>\n                        Save\n                    </button>\n\n\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Form, Toast} from \"react-bootstrap\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\nimport { SingleSemesterDisplay } from \"./SingleSemesterDisplay\";\nimport data from \"../assets/data.json\";\nimport {Mod} from \"../components/modalHelper\";\n\ninterface Single_Semester_View {\n    userSemesters: Semester[];\n    updateSemesters: (s: Semester[]) => void;\n}\n\nexport function EditSemesters_Pane({ userSemesters, updateSemesters }: Single_Semester_View): JSX.Element {\n\n    //Constants-------------------\n    const [current_semester_num, changeSemNum] = useState(0);\n    const [newClassInput, updateInput] = useState<string>(\"\");\n    const [showDuplicateCourseError, setShowDupCourseErr] = useState(false);\n    const [showPrereqCourseErr, setPrereqCourseErr] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n\n\n    const[courseInfoName, displayName] = useState(\"Course ID\");\n    const[courseInfoDescription, displayDescription] = useState(\"Course Description\");\n    const[courseInfoCredits, displayCredits] = useState(\"\");\n    const[courseInfoPrereqs, displayPrereqs] = useState(\"Course Prerequisites\");\n\n\n    //Functions-------------------\n\n    //Removes the current semester\n    const remove_semester = () => {\n        const modifiedSemesterList: Semester[] = [];\n        userSemesters.forEach((semester: Semester) => {\n            modifiedSemesterList.push(semester);\n        });\n        // if on last elemnet remove it\n        if (current_semester_num === userSemesters.length - 1 && userSemesters.length !=1) {\n            modifiedSemesterList.splice(current_semester_num, 1);\n            updateSemesters(userSemesters);\n            changeSemNum(current_semester_num - 1);\n        }else if (userSemesters.length > 1 && current_semester_num != 1){\n            modifiedSemesterList.splice(current_semester_num, 1);\n            modifiedSemesterList.forEach((semester: Semester, index: number) => {\n                semester.semester_number = index + 1;\n            });    \n        }    \n        //update semester list\n        updateSemesters(modifiedSemesterList);\n        if (current_semester_num < userSemesters.length - 1) {\n            console.log(current_semester_num);\n        }\n    };\n\n    //Returns array of class 'id's for auto fill\n    function getAllCourses(): string[] {\n        const id_list: string[] = [];\n        data.map((courseList) => {\n            id_list.push(courseList.id);\n        });\n        return id_list;\n    }\n\n    //Checks for to make sure course doesnt exist in current plan\n    //and returns true if it ISNT and false if it IS\n    function checkForDuplicates(newCourseID: string): boolean{\n        let canAddCourse = true;\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) =>{\n                if(course.crsName == newCourseID){\n                    canAddCourse = false;\n                }\n            });\n        });\n        return canAddCourse;\n    }\n\n    //Checks for to make sure course prerequisites exist in current plan\n    //and returns True if they have prereqs and False if they dont\n    function checkForPrereqs(prereqsString: string): boolean{\n        let canAddCourse = false;\n        const prereqsArray = prereqsString.split(\",\");\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) =>{\n                prereqsArray.forEach((prereqCourseID: string, index:number)=>{\n                    if(course.crsName == prereqCourseID){\n                        prereqsArray.splice(index,1);\n                    }\n                });\n            });\n        });\n        console.log(prereqsArray);\n        console.log(prereqsArray.length);\n        if((prereqsArray.length == 1 && prereqsArray[0]==\"\")||prereqsArray.length==0){\n            canAddCourse = true;\n        }\n        return canAddCourse;\n    } \n\n    //Adds a course to the current semester\n    function addCourse(entered_id: string): void {\n        let new_crs: Course = { crsName: \"\", crsDescription: \"\", crsCredits: 0, crsPrereqs:\"\", semester_number: 0};\n        const modifiedSemesterList: Semester[] = [];\n        userSemesters.forEach((semester: Semester) => {\n            modifiedSemesterList.push(semester);\n        });\n        data.map((courseList) => {\n            if (courseList.id == entered_id) {\n                if(!checkForPrereqs(courseList.prereqs)){\n                    setPrereqCourseErr(true);\n                }else if(!checkForDuplicates(entered_id)){\n                    setShowDupCourseErr(true);\n                }else{\n                    new_crs = { crsName: courseList.id, crsDescription: courseList.name, crsCredits: parseInt(courseList.credits, 10), crsPrereqs: courseList.prereqs, semester_number: current_semester_num+1 };\n                    modifiedSemesterList[current_semester_num].course_set.push(new_crs);\n                    updateSemesters(modifiedSemesterList);\n                }\n            }\n        });\n    }\n\n    //Displays a courses information in the course info section\n    function showCourseInfo(entered_id: string): void {\n        data.map((courseList) => {\n            if (courseList.id == entered_id) {\n                displayName(courseList.name);\n                displayDescription(courseList.description);\n                displayCredits(courseList.credits);\n                displayPrereqs(courseList.prereqs);\n            }\n        });\n    }\n\n\n    //shows next semester on click\n    const show_Next_Semester = () => {\n        if (current_semester_num < userSemesters.length-1) {\n            changeSemNum(v => v + 1);\n        }\n    };\n\n    //shows perv semester on click\n    const show_Prev_Semester = () => {\n        if (current_semester_num > 0) {\n            changeSemNum(v => v - 1);\n        }  \n    };\n\n    //Return Statement-------------\n    return (\n        <>\n            <div className=\"container-fluid padding text-left\">\n                <Mod\n                    showModal={showModal}\n                    setShow={setShowModal}\n                    crsID={newClassInput}               \n                />\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <div className=\"text-center\">\n                            <button type=\"button\" className=\"col-3 btn btn-primary m-3\"\n                                onClick={() => show_Prev_Semester()}>Previous Semester</button>\n                            <button type=\"button\" className=\"col-3 btn btn-danger m-3\" data-testid=\"Remove-Semester\"\n                                onClick={() => remove_semester()}>Remove Semester</button>\n                            <button type=\"button\" className=\"col-3 btn btn-primary m-3\"\n                                onClick={() => show_Next_Semester()}>Next Semester</button>\n                        </div>\n\n                        <SingleSemesterDisplay course_set={userSemesters[current_semester_num].course_set}\n                            semester_number={userSemesters[current_semester_num].semester_number}\n                            userSemesters={userSemesters} updateSemesters={updateSemesters}\n                        />\n\n                    </div>\n\n                    <div className=\"col-3 text-center\">\n                        <h2 className=\"text-success mt-5\"><b>Add Course</b></h2>\n                        <Form id=\"searchBar\" onSubmit={(event) => {\n                            addCourse(newClassInput);\n                            event.preventDefault();\n                        }}>\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label>Enter the desired course code:</Form.Label>\n                                <Autocomplete onChange={(event, value) => {\n                                    updateInput(value as string); event.preventDefault();\n                                }} disablePortal id=\"combo-box-demo\" options={getAllCourses()} renderInput={(params) => <TextField {...params} size={undefined} variant='outlined' label=\"Enter Course ID\" placeholder=\"CISC\" />} />\n                            </Form.Group>\n\n                            <Button className=\"btn btn-success text-center m-2\" data-testid=\"Add-Course\" onClick={() => {\n                                addCourse(newClassInput, );\n                            }}>\n                                Add Course\n                            </Button>\n\n                            <Button className=\"btn btn-info text-center m-2\" onClick={()=>{\n                                showCourseInfo(newClassInput);\n                            }}>\n                                Show Course Info\n                            </Button>\n                            <Button className=\"btn btn-info text-center m-2\" onClick={()=>{\n                                setShowModal(true);\n                            }}>\n                                Edit\n                            </Button>\n\n                            <Toast bg=\"danger\" onClose={() => setShowDupCourseErr(false)} show={showDuplicateCourseError} delay={8000} autohide>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">Error: Course Already in Plan </strong>\n                                </Toast.Header>\n                                <Toast.Body>\n                                    <p><b>The course you are trying to add is already in your current plan!</b></p>\n                                    <p>(If it`s not in the current semester, it might be in one of the other semesters included in your plan)</p>\n                                </Toast.Body>\n                            </Toast>\n\n                            <Toast bg=\"danger\" onClose={() => setPrereqCourseErr(false)} show={showPrereqCourseErr} delay={8000} autohide>\n                                <Toast.Header>\n                                    <strong className=\"me-auto\">Error: Not all Prerequisites</strong>\n                                </Toast.Header>\n                                <Toast.Body>\n                                    <p><b>The course you are trying to add has prerequisites not included in your plan!</b></p>\n                                    <p>(If you would like to add this class, please first add all of its prerequisites)</p>\n                                </Toast.Body>\n                            </Toast>\n\n                        </Form>\n                    </div>\n\n                    <div className=\"col-3 text-center\">\n                        <h3 className=\"text-info mt-5\"><b>Course Info</b></h3>\n                        <div>\n                            <h5>Name:</h5>\n                            <p> {courseInfoName} </p>\n                            <hr></hr>\n                            <h5>Description:</h5>\n                            <p>{courseInfoDescription}</p>\n\n                            <hr></hr>\n\n                            <h5>Credits: {courseInfoCredits}</h5>\n\n                            <hr></hr>\n\n                            <h5>Prerequisites:</h5>\n                            <p>{courseInfoPrereqs}</p>\n                            <hr></hr>\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}","import { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\n\nexport const example_courses: Course[] = [{ crsName: \"EGGG 101\", crsDescription: \"Introduction to Engineering\", crsCredits: 2, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"CISC 108\", crsDescription: \"Introduction to Somputer Science I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"MATH 241\", crsDescription: \"Analytic Geometry and Calculus A\", crsCredits: 4, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"ENGL 110\", crsDescription: \"Seminar in Composition\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"Breadth Req. I\", crsDescription: \"Breadth Requirement Elective (1/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 },\n    { crsName: \"CISC 181\", crsDescription: \" Introduction to Computer Science II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"MATH 242\", crsDescription: \"Analytic Geometry & Calculus B\", crsCredits: 4, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"CISC 210\", crsDescription: \"Introduction to Systems Programming\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"Laboratory Science I\", crsDescription: \"Laboratory Science (1/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"Breadth Req. II\", crsDescription: \"Breadth Requirement Elective (2/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 },\n    { crsName: \"CISC 220\", crsDescription: \"Data Structures\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"CISC 260\", crsDescription: \"Machine Org. & Assembly Language\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"MATH 210\", crsDescription: \"Discrete Mathematics I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"Laboratory Science II\", crsDescription: \"Laboratory Science (2/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"Breadth Req. III\", crsDescription: \"Breadth Requirement Elective (3/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 },\n    { crsName: \"CISC 355\", crsDescription: \"Computers, Ethics & Society\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"CISC 275\", crsDescription: \"Introduction to Software Engineering\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"MATH 205\", crsDescription: \"Statistical Methods\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"Laboratory Science III\", crsDescription: \"Laboratory Science (3/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"Breadth Req. IV\", crsDescription: \"Breadth Requirement Elective (4/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 },\n    { crsName: \"CISC 320\", crsDescription: \"Introduction to Algorithms\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"CISC 361\", crsDescription: \"Operating Systems\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"CISC 304\", crsDescription: \"Logic and Programming\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"Concentration Elective I\", crsDescription: \"Concentration Elective (1/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"General Elective I\", crsDescription: \"General Elective (1/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 },\n    { crsName: \"CISC 372\", crsDescription: \"Parallel Computing\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"CISC 303\", crsDescription: \"Automata Theory\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"ENGL 312\", crsDescription: \"Written Communication in Business\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"Concentration Elective II\", crsDescription: \"Concentration Elective (2/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"General Elective II\", crsDescription: \"General Elective (2/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 },\n    { crsName: \"CISC 498\", crsDescription: \"Computer Science Design Project I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"Concentration Elective III\", crsDescription: \"Concentration Elective (3/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"General Elective III\", crsDescription: \"General Elective (3/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"General Elective IV\", crsDescription: \"General Elective (4/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 },\n    { crsName: \"CISC 499\", crsDescription: \"Computer Science Design Project II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"Concentration Elective IV\", crsDescription: \"Concentration Elective (4/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"General Elective V\", crsDescription: \"General Elective (5/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"General Elective VI\", crsDescription: \"General Elective (6/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }];\n\nconst example_semester1: Semester = { course_set: [example_courses[0], example_courses[1], example_courses[2], example_courses[3], example_courses[4]], semester_number: 1 };\nconst example_semester2: Semester = { course_set: [example_courses[5], example_courses[6], example_courses[7], example_courses[8], example_courses[9]], semester_number: 2 };\nconst example_semester3: Semester = { course_set: [example_courses[10], example_courses[11], example_courses[12], example_courses[13], example_courses[14]], semester_number: 3 };\nconst example_semester4: Semester = { course_set: [example_courses[15], example_courses[16], example_courses[17], example_courses[18], example_courses[19]], semester_number: 4 };\nconst example_semester5: Semester = { course_set: [example_courses[20], example_courses[21], example_courses[22], example_courses[23], example_courses[24]], semester_number: 5 };\nconst example_semester6: Semester = { course_set: [example_courses[25], example_courses[26], example_courses[27], example_courses[28], example_courses[29]], semester_number: 6 };\nconst example_semester7: Semester = { course_set: [example_courses[30], example_courses[31], example_courses[32], example_courses[33], example_courses[34]], semester_number: 7 };\nconst example_semester8: Semester = { course_set: [example_courses[35], example_courses[36], example_courses[37], example_courses[38], example_courses[39]], semester_number: 8 };\n\nexport const semester_list: Semester[] = [example_semester1, example_semester2, example_semester3, example_semester4, example_semester5, example_semester6, example_semester7, example_semester8];","import React from \"react\";\n\nexport function WelcomeAndHelp_Pane() :JSX.Element {\n    return (\n        <div>\n            <h2>Welsome to Team 21`s UD CISC Scheduler</h2>\n            <p>Every student at the University of Delaware is assigned an Academic Advisor who is meant to help guide the student to graduation.</p>\n            <p>The advisor`s role is to help students become self-sufficient, and they aren`t intended to make decisions on behalf students. Ideally, by the end of their degree, students have chosen their own path to graduation, with minimal input from their adviser. To facilitate their choices, students are often strongly recommended to construct a Degree Plan.</p>\n            <p>However, an open-ended field like Computer Science poses a unique challenge, since there are many possible paths to graduation with different tradeoffs and opportunities. Indeed, many students come in with almost no knowledge of the possible career directions and what courses support those paths. Further, the incredibly high student-to-faculty ratio, along with already stretched faculty resources, exacerbates the situation. There is never enough time for busy faculty to meet with their advisees.</p>\n            <p>Although there are many logistical and administrative barriers to success, at least one procedural problem might be solvable with technology: many students struggle to put together a clear 4-year plan without a lot of prompting and help from their adviser.</p>\n            <p>Our goal, with this website, is to help Computer Science majors at the University of Delaware to put together a Degree Plan and streamline their advising experience.</p>\n        </div>\n    );\n}","import React from \"react\";\nimport { Offcanvas } from \"react-bootstrap\";\n\ninterface Degree_Requirements_Inputs {\n    show: boolean;\n    setShow: (b: boolean) => void;\n    setWidth: (n: number) => void;\n}\n\nexport function DegreeRequirements_Section({ show, setShow, setWidth }: Degree_Requirements_Inputs): JSX.Element {\n\n    //Hides degree requirement panel\n    function hideDegReqs(): void {\n        setShow(false);\n        setWidth(12);\n    }\n\n    return (\n        <Offcanvas show={show} placement=\"end\" scroll={true} backdrop={true} onHide={() => hideDegReqs()}>\n            <Offcanvas.Header closeButton>\n                <Offcanvas.Title>Degree Requirements</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n                This will eventually be an active list. indicating which of the\n                degree requirements have been met by the current plan and which have not\n            </Offcanvas.Body>\n        </Offcanvas>\n    );\n}","import React from \"react\";\nimport { Nav, Button, Col, Row } from \"react-bootstrap\";\n\ninterface App_Navbar_Inputs {\n    setShow: (b: boolean) => void;\n    setWidth: (n: number) => void;\n}\n\nexport function App_Navbar({ setShow, setWidth }: App_Navbar_Inputs): JSX.Element {\n\n    //Shows degree requirement panel\n    function showDegReqs(): void {\n        setShow(true);\n        setWidth(9);\n    }\n\n    return (\n        <>\n            <hr></hr>\n            <Nav variant=\"pills\" role=\"button\" className=\"flex-row text-center\">\n                <Col md={10}>\n                    <Row>\n                        <Nav.Item><Nav.Link eventKey=\"first\">Welcome and Help</Nav.Link></Nav.Item>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <Nav.Item><Nav.Link eventKey=\"second\">My Plan</Nav.Link></Nav.Item>\n                        </Col>\n                        <Col md={6}>\n                            <Nav.Item><Nav.Link eventKey=\"third\">Edit Plan</Nav.Link></Nav.Item>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={2} className=\"text-center\">\n                    <Button variant=\"secondary\" onClick={() => showDegReqs()}>View Degree Requirements</Button>\n                </Col>\n            </Nav>\n            <hr></hr>\n        </>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/logo.4f3a436c.png\";","import React, { useState } from \"react\";\nimport { Tab, Col } from \"react-bootstrap\";\nimport \"./App.css\";\nimport { MyPlan_Pane } from \"./components/MyPlan_Pane\";\nimport ScrollToTopBtn from \"./components/gotToTop\";\nimport { EditSemesters_Pane } from \"./components/EditSemesters_Pane\";\nimport { Semester } from \"./interfaces/Semester\";\nimport { semester_list } from \"./assets/Globals\";\nimport { WelcomeAndHelp_Pane } from \"./components/WelcomeAndHelp_Pane\";\nimport { DegreeRequirements_Section } from \"./components/DegreeRequirements_Section\";\nimport { App_Navbar } from \"./components/App_Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from \"./logo.png\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App(): JSX.Element {\n\n    //Constants-------------------\n    const [userSemesters, updateSemesters] = useState<Semester[]>(semester_list);\n\n    const [DegreeReq_View_State, toggleDegreeReqView] = useState(false);\n    const [app_Content_Width, setAppContentWidth] = useState(12);\n\n    const notify = () => toast(\"Go to the 'Welcome and Help' Page to see instructions and clear up any confusion you may have\");\n\n    //Return Statement---------------\n    return (\n        <div className=\"App\">\n\n            <header className=\"App-header\">\n                <h1 className=\"mt-4\">UD CIS Scheduler</h1>\n            </header>\n\n            <div className=\"text-left\"><img className=\"logo\" src={logo} alt=\"Logo\" /></div>\n\n            <div className=\"help\">\n                <button className=\"btn-sm btn-info\" onClick={notify}>Help</button>\n                <ToastContainer />\n            </div>\n\n            <Col md={app_Content_Width}>\n\n                <DegreeRequirements_Section show={DegreeReq_View_State} setShow={toggleDegreeReqView} setWidth={setAppContentWidth} />\n\n                <Tab.Container defaultActiveKey=\"first\">\n\n                    <App_Navbar setShow={toggleDegreeReqView} setWidth={setAppContentWidth} />\n\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"first\"> <WelcomeAndHelp_Pane /> </Tab.Pane>\n\n                        <Tab.Pane eventKey=\"second\"> <MyPlan_Pane userSemesters={userSemesters} updateSemesters={updateSemesters} /> </Tab.Pane>\n\n                        <Tab.Pane eventKey=\"third\"> <EditSemesters_Pane userSemesters={userSemesters} updateSemesters={updateSemesters} /> </Tab.Pane>\n\n                        <ScrollToTopBtn />\n\n                    </Tab.Content>\n                    \n                </Tab.Container>\n            </Col>\n\n\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}