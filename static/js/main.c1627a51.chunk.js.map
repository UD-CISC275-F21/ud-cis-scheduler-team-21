{"version":3,"sources":["components/WelcomeAndHelp_Pane.tsx","components/Course_MS_Display.tsx","components/Semester_MS_Display.tsx","components/MyPlan_Pane.tsx","components/Course_SS_Display.tsx","components/Semester_SS_Display.tsx","components/EditCourseInfo_Modal.tsx","components/AddCourseError_Toasts.tsx","components/AddCourse_Section.tsx","components/EditSemesters_Pane.tsx","components/App_Navbar.tsx","components/DegreeRequirements_Section.tsx","assets/ExamplePlan.tsx","components/gotToTop.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeAndHelp_Pane","Course_MS_Display","course","crsName","crsDescription","className","crsCredits","Semester_MS_Display","course_set","semester_number","userSemesters","useState","creditSum","addSum","useEffect","forEach","v","map","index","MyPlan_Pane","updateSemesters","creditTotal","addTotal","semester","totalcredits","type","onClick","console","log","length","empty_sem","credits","add_empty_semester","window","location","reload","Course_SS_Display","remove_class","Semester_SS_Display","sem_num","course_name","splice","EditCourseInfo_Modal","showModal","setShow","crsID","handleClose","courseDescription","setCourseDescription","courseName","setCourseName","courseCredits","setCourseCredits","coursePrereqs","setCoursePrereqs","data","courseList","id","description","name","prereqs","Modal","show","onHide","size","Header","closeButton","Title","Body","value","onChange","e","target","Button","variant","Footer","DuplicateError_Toast","showDuplicateCourseError","setShowDupCourseErr","Toast","bg","onClose","delay","autohide","PrerequisiteError_Toast","showPrereqCourseErr","setPrereqCourseErr","AddCourse_Section","current_semester_num","newClassInput","updateInput","setShowModal","courseInfoName","displayName","courseInfoDescription","displayDescription","courseInfoCredits","displayCredits","courseInfoPrereqs","displayPrereqs","addCourse","entered_id","new_crs","crsPrereqs","prereqsString","canAddCourse","prereqsArray","split","prereqCourseID","checkForPrereqs","newCourseID","checkForDuplicates","parseInt","push","Form","onSubmit","event","preventDefault","Group","Label","Autocomplete","disablePortal","options","id_list","getAllCourses","renderInput","params","TextField","undefined","label","placeholder","EditSemesters_Pane","changeSemNum","App_Navbar","setWidth","Nav","role","Col","md","Row","Item","Link","eventKey","DegreeRequirements_Section","Offcanvas","placement","scroll","backdrop","example_courses","ExamplePlan","ScrollToTop","isVisible","setIsVisible","toggleVisibility","pageYOffset","addEventListener","scrollTo","top","behavior","src","alt","App","DegreeReq_View_State","toggleDegreeReqView","app_Content_Width","setAppContentWidth","logo","toast","Tab","Container","defaultActiveKey","Content","Pane","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1627a51.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function WelcomeAndHelp_Pane() :JSX.Element {\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <div>\n            <h2>Welcome to Team 21s UD CISC Scheduler</h2>\n            <p>Every student at the University of Delaware is assigned an Academic Advisor who is meant to help guide the student to graduation.</p>\n            <p>The advisor`s role is to help students become self-sufficient, and they aren`t intended to make decisions on behalf students. Ideally, by the end of their degree, students have chosen their own path to graduation, with minimal input from their adviser. To facilitate their choices, students are often strongly recommended to construct a Degree Plan.</p>\n            <p>However, an open-ended field like Computer Science poses a unique challenge, since there are many possible paths to graduation with different tradeoffs and opportunities. Indeed, many students come in with almost no knowledge of the possible career directions and what courses support those paths. Further, the incredibly high student-to-faculty ratio, along with already stretched faculty resources, exacerbates the situation. There is never enough time for busy faculty to meet with their advisees.</p>\n            <p>Although there are many logistical and administrative barriers to success, at least one procedural problem might be solvable with technology: many students struggle to put together a clear 4-year plan without a lot of prompting and help from their adviser.</p>\n            <p>Our goal, with this website, is to help Computer Science majors at the University of Delaware to put together a Degree Plan and streamline their advising experience.</p>\n        </div>\n    );\n}","import React from \"react\";\nimport { Course } from \"../interfaces/Course\";\n\ninterface Course_MS_Inputs{\n    course: Course;\n}\n\n//Function Defining the display characteristics of a Course in the Multi Semester View\nexport function Course_MS_Display({ course }: Course_MS_Inputs): JSX.Element{\n    //---------------------------Return Statement---------------------------\n    return (\n        <tr>\n            <td><b>{course.crsName}:</b> {course.crsDescription}</td>\n            <td className=\"text-center\">{course.crsCredits}</td>\n        </tr>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\nimport { Course_MS_Display } from \"./Course_MS_Display\";\n\n\ninterface Semester_MS_Display_Inputs {\n    course_set: Course[];\n    semester_number: number;\n    userSemesters: Semester[];\n}\n\nexport function Semester_MS_Display({ course_set, semester_number, userSemesters }: Semester_MS_Display_Inputs): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //Total Credits in the semester\n    const [creditSum, addSum] = useState(0);\n\n\n    //---------------------------Use Effect---------------------------\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: Course) => {\n            addSum(v => v + course.crsCredits);\n        });\n    }, [semester_number, userSemesters, course_set]);\n\n\n    //---------------------------Return Statement---------------------------\n    return <div className=\"col-md-6\">\n        <h2 className=\"Semester\"><b>Semester {semester_number}</b></h2>\n\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th className=\"text-center\">Course</th>\n                    <th className=\"text-center\">Credits</th>\n                </tr>\n            </thead>\n\n            <tbody>\n                {course_set.map((course: Course, index: number) => {\n                    return <Course_MS_Display key={index} course={course} />;\n                })}\n            </tbody>\n\n            <tfoot>\n                <tr>\n                    <td><b>Total Credits</b></td>\n                    <td><b>{creditSum}</b></td>\n                </tr>\n            </tfoot>\n        </table>\n    </div>\n    ;\n}","import React, {useState, useEffect} from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\nimport { Semester_MS_Display } from \"./Semester_MS_Display\";\n\n\ninterface Multi_Semester_View {\n    userSemesters: Semester[];\n    updateSemesters: (s : Semester[])=>void;\n}\n\nexport function MyPlan_Pane({userSemesters, updateSemesters}:Multi_Semester_View): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //Total Credits in the users plan\n    const [creditTotal, addTotal] = useState(0);\n\n\n    //---------------------------Functions---------------------------\n\n    //Removes all the Semesters from the plan\n    function remove_all_semesters () {\n        const empty_sem: Semester = {course_set:[], semester_number: 1, credits:0 };\n        updateSemesters([empty_sem]);\n        addTotal(0);\n    }\n\n    //Adds an empty Semester to the plan\n    function add_empty_semester(): void{\n        console.log(userSemesters[userSemesters.length-1].semester_number+1);\n        const empty_sem: Semester = { course_set: [], semester_number: userSemesters[userSemesters.length-1].semester_number + 1, credits:0};\n        updateSemesters([...userSemesters, empty_sem]);\n    }\n\n\n\n\n    //---------------------------Use Effect---------------------------\n\n    //Updates the Sum total at start and when the array 'userSemesters' changes\n    useEffect(() => {\n        addTotal(0);\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) => {\n                addTotal(totalcredits => totalcredits + course.crsCredits);\n            });\n        });\n    }, [userSemesters]);\n\n\n    //---------------------------Return Statement---------------------------\n    return (\n\n        <div className=\"container-fluid padding\" >\n\n            <div className=\"row padding\" data-testid=\"semester-list\">\n                {userSemesters.map((semester: Semester, index: number) => {\n                    return <Semester_MS_Display key={index} course_set={semester.course_set} semester_number={semester.semester_number} userSemesters={userSemesters} />;\n                })}\n            </div>\n\n            <div className=\"text-center\">\n                <p><strong>Total Credits: </strong> <b>{creditTotal}</b></p>\n                <div className=\"row\">\n                    <div className=\"col-4\">\n                        <button type=\"button\" className=\"btn btn-primary btn-lg btn-block\"  data-testid=\"Add-Semester\" \n                            onClick={() => add_empty_semester()}>Add Semester</button>\n                    </div>\n                    <div className=\"col-4\">\n                        <button type=\"button\" className=\"btn btn-danger btn-lg btn-block\" data-testid=\"Clear-Plan\"\n                            onClick={() => remove_all_semesters()}>Clear Plan</button>\n                    </div>\n                    <div className=\"col-4\">\n                        <form>\n                            <button type=\"button\" className=\"btn btn-secondary btn-lg btn-block\" \n                                onClick={() => window.location.reload()}>Reset</button>\n                        </form>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport { Course } from \"../interfaces/Course\";\n\n\ninterface Course_SS_Inputs{\n    course: Course;\n    remove_class: (n: number, s : string) => void;\n}\n\n//Defining the display characteristics of a Course in the Single Semester View\nexport function Course_SS_Display({ course, remove_class }:Course_SS_Inputs):JSX.Element{\n    //---------------------------Return Statement---------------------------\n    return (\n        <tr className=\"w-100\">\n            <td><b>{course.crsName}:</b> {course.crsDescription}</td>\n            <td className=\"text-center\">{course.crsCredits}</td>\n            <td className=\"editcourse\">\n                <button type=\"button\" className=\"btn btn-outline-danger m-1\" data-testid=\"Remove-Course\"\n                    onClick={() => remove_class(course.semester_number as number, course.crsName)}>X</button>\n            </td>\n        </tr>\n    );\n}\n\n\n\n","import React, { useState, useEffect } from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\nimport { Course_SS_Display } from \"./Course_SS_Display\";\n\n\ninterface Semester_SS_Display_Inputs {\n    course_set: Course[];\n    semester_number: number;\n    userSemesters: Semester[];\n    updateSemesters: (s: Semester[]) => void;\n}\n\nexport function Semester_SS_Display({ course_set, semester_number, userSemesters, updateSemesters }: Semester_SS_Display_Inputs): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //Total Credits in the semester\n    const [creditSum, addSum] = useState(0);\n\n\n    //---------------------------Functions---------------------------\n\n    //Removes all the courses from the current Semester\n    function remove_all_classes(sem_num: number): void {\n        userSemesters[sem_num - 1].course_set.splice(0, userSemesters[sem_num - 1].course_set.length);\n        updateSemesters([...userSemesters]);\n        addSum(0);\n    }\n\n    //Remove a single course from the current Semester\n    function remove_class(sem_num: number, course_name: string): void {\n        userSemesters[sem_num - 1].course_set.forEach((course: Course, index: number) => {\n            if (course.crsName == course_name) {\n                userSemesters[sem_num - 1].course_set.splice(index, 1);\n                updateSemesters([...userSemesters]);\n                addSum(v => v - course.crsCredits);\n            }\n        });\n    }\n\n\n    //---------------------------Use Effect---------------------------\n\n    //Updates the Sum total at start and if the semester number or courses in the semester change\n    useEffect(() => {\n        addSum(0);\n        course_set.forEach((course: Course) => {\n            addSum(v => v + course.crsCredits);\n        });\n\n    }, [semester_number, course_set, userSemesters]);\n\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <div className=\"w-100\">\n\n            <table className=\"table\">\n                <thead>\n                    <h2 data-testid=\"semesterNumber\" className=\"Semester\"><b>Semester {semester_number}</b></h2>\n                    <tr>\n                        <th className=\"text-center\">Courses</th>\n                        <th className=\"text-center\">Credit</th>\n                        <th className=\"Actions\">Actions</th>\n                    </tr>\n                </thead>\n                <tbody data-testid=\"course-list\">\n                    {course_set.map((course: Course, index: number) => {\n                        return <Course_SS_Display key={index} course={course} remove_class={remove_class} />;\n                    })}\n                </tbody >\n            </table >\n\n            <div>\n                <b>Total Credits:  </b>\n                <b>{creditSum}</b>\n            </div>\n\n            <div className=\"text-center\">\n                <button type=\"button\" className=\"btn btn-danger m-1\" data-testid=\"Remove-All-Courses\"\n                    onClick={() => remove_all_classes(semester_number as number)}>Remove all courses</button>\n            </div>\n        </div >\n    );\n}","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport data from \"../assets/data.json\";\n\n\ninterface EditCourseInfo_Modal_Inputs {\n    showModal: boolean;\n    setShow: (b: boolean) => void;\n    crsID: string;\n}\n\nexport function EditCourseInfo_Modal({ showModal, setShow, crsID }: EditCourseInfo_Modal_Inputs): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    const handleClose = () => setShow(false);\n    const [courseDescription, setCourseDescription] = useState(\"Course Description\");\n    const [courseName, setCourseName] = useState(\"Course Name\");\n    const [courseCredits, setCourseCredits] = useState(\"Course Credits\");\n    const [coursePrereqs, setCoursePrereqs] = useState(\"Course Prereqs\");\n\n\n    //---------------------------Functions---------------------------\n\n    //saves the data in the modal as the new data for the course\n    function saveNewData(): void {\n        data.map((courseList) => {\n            if (courseList.id == crsID) {\n                courseList.description = courseDescription;\n                courseList.name = courseName;\n                courseList.credits = courseCredits;\n                courseList.prereqs = coursePrereqs;\n                setShow(false);\n            }\n        });\n    }\n\n\n    //---------------------------Use Effect---------------------------\n    useEffect(() => {\n        data.map((courseList) => {\n            if (courseList.id == crsID) {\n                setCourseDescription(courseList.description);\n                setCourseName(courseList.name);\n                setCourseCredits(courseList.credits);\n                setCoursePrereqs(courseList.prereqs);\n            }\n        });\n    }, [crsID]);\n\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <Modal show={showModal} onHide={handleClose} size=\"lg\">\n            <Modal.Header closeButton>\n                <Modal.Title>Edit the traits of: {crsID}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-3 text-center mt-3\">\n                            <p><b>Name </b></p>\n                        </div>\n                        <div className=\"col-9 text-center\">\n                            <textarea className=\"form-control m-1\" aria-label=\"inputName\" id=\"NameInput\" value={courseName} onChange={(e) => setCourseName(e.target.value)}></textarea>                          \n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-3 text-center mt-3\">\n                            <p><b>Description </b></p>\n                        </div>\n                        <div className=\"col-9 text-center\">\n                            <textarea className=\"form-control m-1\" aria-label=\"inputDescription\" id=\"DescriptionInput\" value={courseDescription} onChange={(e) => setCourseDescription(e.target.value)}></textarea>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-3 text-center mt-3\">\n                            <p><b>Credits</b></p>\n                        </div>\n                        <div className=\"col-9 text-center\">\n                            <textarea className=\"form-control m-1\" id=\"CreditInput\" value={courseCredits} onChange={(e) => setCourseCredits(e.target.value)}></textarea>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-3 text-center mt-3\">\n                            <p><b>Prerequisites</b></p>\n                        </div>\n                        <div className=\"col-9 text-center\">\n                            <textarea className=\"form-control m-1\" id=\"PrereqsInput\" value={coursePrereqs} onChange={(e) => setCoursePrereqs(e.target.value)}></textarea>\n                        </div>\n                    </div>\n                    <div className=\"text-center mt-2\">\n                        <Button variant=\"primary\" onClick={() => saveNewData()}>Save</Button>\n                    </div>\n \n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n\n    );\n}\n","import React from \"react\";\nimport { Toast } from \"react-bootstrap\";\n\n\n//-----------------------------------------------Duplicate Error Toast: Component (1/2)--------------------------------------------//\ninterface DuplicateError_Inputs {\n    showDuplicateCourseError: boolean;\n    setShowDupCourseErr: (b: boolean) => void;\n}\n\nexport function DuplicateError_Toast({ showDuplicateCourseError, setShowDupCourseErr }: DuplicateError_Inputs): JSX.Element {\n    return (\n        <>\n            <Toast bg=\"danger\" onClose={() => setShowDupCourseErr(false)} show={showDuplicateCourseError} delay={8000} autohide>\n                <Toast.Header>\n                    <strong className=\"me-auto\">Error: Course Already in Plan </strong>\n                </Toast.Header>\n                <Toast.Body>\n                    <p><b>The course you are trying to add is already in your current plan!</b></p>\n                    <p>(If it`s not in the current semester, it might be in one of the other semesters included in your plan)</p>\n                </Toast.Body>\n            </Toast>\n        </>\n    );\n}\n\n\n\n//-----------------------------------------------Prerequisite Error Toast: Component (2/2)--------------------------------------------//\ninterface PrerequisiteError_Inputs {\n    showPrereqCourseErr: boolean;\n    setPrereqCourseErr: (b: boolean) => void;\n}\n\nexport function PrerequisiteError_Toast({ showPrereqCourseErr, setPrereqCourseErr }: PrerequisiteError_Inputs): JSX.Element {\n    return (\n        <>\n            <Toast bg=\"danger\" onClose={() => setPrereqCourseErr(false)} show={showPrereqCourseErr} delay={8000} autohide>\n                <Toast.Header>\n                    <strong className=\"me-auto\">Error: Not all Prerequisites</strong>\n                </Toast.Header>\n                <Toast.Body>\n                    <p><b>The course you are trying to add has prerequisites not included in your plan!</b></p>\n                    <p>(If you would like to add this class, please first add all of its prerequisites)</p>\n                </Toast.Body>\n            </Toast>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { EditCourseInfo_Modal } from \"./EditCourseInfo_Modal\";\nimport { DuplicateError_Toast, PrerequisiteError_Toast } from \"./AddCourseError_Toasts\";\nimport { Course } from \"../interfaces/Course\";\nimport { Semester } from \"../interfaces/Semester\";\nimport data from \"../assets/data.json\";\n\n\ninterface NewCourse_Section_Inputs {\n    userSemesters: Semester[];\n    updateSemesters: (s: Semester[]) => void;\n    current_semester_num: number;\n}\n\nexport function AddCourse_Section({ userSemesters, updateSemesters, current_semester_num }: NewCourse_Section_Inputs): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //String used for autofill\n    const [newClassInput, updateInput] = useState<string>(\"\");\n\n    //Booleans to show errors when adding course\n    const [showDuplicateCourseError, setShowDupCourseErr] = useState(false);\n    const [showPrereqCourseErr, setPrereqCourseErr] = useState(false);\n\n    //Boolean to show EditCourse Modal\n    const [showModal, setShowModal] = useState(false);\n\n    //Strings used to display the Course Info\n    const [courseInfoName, displayName] = useState(\"Course ID\");\n    const [courseInfoDescription, displayDescription] = useState(\"Course Description\");\n    const [courseInfoCredits, displayCredits] = useState(\"\");\n    const [courseInfoPrereqs, displayPrereqs] = useState(\"Course Prerequisites\");\n\n\n    //---------------------------Functions---------------------------\n\n    //Adds a course to the current semester\n    function addCourse(entered_id: string): void {\n        let new_crs: Course = { crsName: \"\", crsDescription: \"\", crsCredits: 0, crsPrereqs: \"\", semester_number: 0 };\n        data.map((courseList) => {\n            if (courseList.id == entered_id) {\n                if (!checkForPrereqs(courseList.prereqs)) {\n                    setPrereqCourseErr(true);\n                } else if (!checkForDuplicates(entered_id)) {\n                    setShowDupCourseErr(true);\n                } else {\n                    new_crs = { crsName: courseList.id, crsDescription: courseList.name, crsCredits: parseInt(courseList.credits, 10), crsPrereqs: courseList.prereqs, semester_number: current_semester_num + 1 };\n                    userSemesters[current_semester_num].course_set.push(new_crs);\n                    updateSemesters([...userSemesters]);\n                }\n            }\n        });\n    }\n\n    //Checks for to make sure course doesnt exist in current plan\n    //and returns true if it ISNT and false if it IS\n    function checkForDuplicates(newCourseID: string): boolean {\n        let canAddCourse = true;\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) => {\n                if (course.crsName == newCourseID) {\n                    canAddCourse = false;\n                }\n            });\n        });\n        return canAddCourse;\n    }\n\n    //Checks for to make sure course prerequisites exist in current plan\n    //and returns True if they have prereqs and False if they dont\n    function checkForPrereqs(prereqsString: string): boolean {\n        let canAddCourse = false;\n        const prereqsArray = prereqsString.split(\",\");\n        userSemesters.forEach((semester: Semester) => {\n            semester.course_set.forEach((course: Course) => {\n                prereqsArray.forEach((prereqCourseID: string, index: number) => {\n                    if (course.crsName == prereqCourseID) {\n                        prereqsArray.splice(index, 1);\n                    }\n                });\n            });\n        });\n        if ((prereqsArray.length == 1 && prereqsArray[0] == \"\") || prereqsArray.length == 0) {\n            canAddCourse = true;\n        }\n        return canAddCourse;\n    }\n\n    //Returns array of class 'id's for auto fill\n    function getAllCourses(): string[] {\n        const id_list: string[] = [];\n        data.map((courseList) => {\n            id_list.push(courseList.id);\n        });\n        return id_list;\n    }\n\n    //Displays a courses information in the course info section\n    function showCourseInfo(entered_id: string): void {\n        data.map((courseList) => {\n            if (courseList.id == entered_id) {\n                displayName(courseList.name);\n                displayDescription(courseList.description);\n                displayCredits(courseList.credits);\n                displayPrereqs(courseList.prereqs);\n            }\n        });\n    }\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <div className=\"row\">\n            <EditCourseInfo_Modal\n                showModal={showModal}\n                setShow={setShowModal}\n                crsID={newClassInput}\n            />\n\n            <div className=\"col-6 text-center\">\n                <h2 className=\"text-success mt-5\"><b>Add Course</b></h2>\n                <Form id=\"searchBar\" onSubmit={(event) => {\n                    addCourse(newClassInput);\n                    event.preventDefault();\n                }}>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Enter the desired course code:</Form.Label>\n                        <Autocomplete data-testid=\"autoComplete\" onChange={(event, value) => {\n                            updateInput(value as string); event.preventDefault();\n                        }} disablePortal id=\"combo-box-demo\" options={getAllCourses()} renderInput={(params) => <TextField {...params} size={undefined} variant='outlined' label=\"Enter Course ID\" placeholder=\"CISC\" />} />\n                    </Form.Group>\n\n                    <DuplicateError_Toast showDuplicateCourseError={showDuplicateCourseError} setShowDupCourseErr={setShowDupCourseErr} />\n                    <PrerequisiteError_Toast setPrereqCourseErr={setPrereqCourseErr} showPrereqCourseErr={showPrereqCourseErr} />\n\n                    <Button className=\"btn btn-success text-center m-2\" data-testid=\"Add-Course\" onClick={() => addCourse(newClassInput)}>\n                        Add Course\n                    </Button>\n                    <Button className=\"btn btn-info text-center m-2\" data-testid=\"courseInfoButton\" onClick={() => showCourseInfo(newClassInput)}>\n                        Show Course Info\n                    </Button>\n                    <Button className=\"btn btn-secondary text-center m-2\" onClick={() => setShowModal(true)}>\n                        Edit Course\n                    </Button>\n                </Form>\n            </div>\n\n            <div className=\"col-6 text-center\">\n                <h3 className=\"text-info mt-5\"><b>Course Info</b></h3>\n                <div data-testid=\"courseInfo\">\n                    <h5>Name:</h5>\n                    <p> {courseInfoName} </p>\n                    <hr></hr>\n                    <h5>Description:</h5>\n                    <p>{courseInfoDescription}</p>\n                    <hr></hr>\n                    <h5>Credits: {courseInfoCredits}</h5>\n                    <hr></hr>\n                    <h5>Prerequisites:</h5>\n                    <p>{courseInfoPrereqs}</p>\n                    <hr></hr>\n                </div>\n            </div>\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Semester } from \"../interfaces/Semester\";\nimport { Semester_SS_Display } from \"./Semester_SS_Display\";\nimport { AddCourse_Section } from \"./AddCourse_Section\";\nimport { Course } from \"../interfaces/Course\";\n\n\n\ninterface Single_Semester_View {\n    userSemesters: Semester[];\n    updateSemesters: (s: Semester[]) => void;\n}\n\nexport function EditSemesters_Pane({ userSemesters, updateSemesters }: Single_Semester_View): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //Tracks the focussed semester (value=0 when focused on semester 1)\n    const [current_semester_num, changeSemNum] = useState(0);\n\n    //---------------------------Functions---------------------------\n\n    //Removes the current semester\n    const remove_semester = () => {\n        if (current_semester_num === userSemesters.length - 1 && userSemesters.length != 1) {\n            userSemesters.splice(current_semester_num, 1);\n            changeSemNum(current_semester_num - 1);\n        } else if (userSemesters.length > 1) {\n            userSemesters.splice(current_semester_num, 1);\n            userSemesters.forEach((semester: Semester, index: number) => {\n                semester.semester_number = index + 1;\n                semester.course_set.forEach((course: Course) => {\n                    course.semester_number=semester.semester_number;\n                });\n            });\n        }\n        updateSemesters([...userSemesters]);\n    };\n\n    //shows next semester on click\n    const show_Next_Semester = () => {\n        if (current_semester_num < userSemesters.length-1) {\n            changeSemNum(v => v + 1);\n        }\n    };\n\n    //shows perv semester on click\n    const show_Prev_Semester = () => {\n        if (current_semester_num > 0) {\n            changeSemNum(v => v - 1);\n        }  \n    };\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <>\n            <div className=\"container-fluid padding text-left\">\n                <div className=\"row\">\n\n                    <div className=\"col-6\">\n                        <div className=\"text-center\">\n                            <button type=\"button\" className=\"col-3 btn btn-primary m-3\"\n                                onClick={() => show_Prev_Semester()}>Previous Semester</button>\n                            <button type=\"button\" className=\"col-3 btn btn-danger m-3\" data-testid=\"Remove-Semester\"\n                                onClick={() => remove_semester()}>Remove Semester</button>\n                            <button type=\"button\" className=\"col-3 btn btn-primary m-3\"\n                                onClick={() => show_Next_Semester()}>Next Semester</button>\n                        </div>\n\n                        <Semester_SS_Display course_set={userSemesters[current_semester_num].course_set}\n                            semester_number={userSemesters[current_semester_num].semester_number}\n                            userSemesters={userSemesters} updateSemesters={updateSemesters}\n                        />\n                    </div>\n\n                    <div className=\"col-6 text-center\">\n                        <AddCourse_Section userSemesters={userSemesters} updateSemesters={updateSemesters} current_semester_num={current_semester_num} />\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}","import React from \"react\";\nimport { Nav, Button, Col, Row } from \"react-bootstrap\";\n\ninterface App_Navbar_Inputs {\n    setShow: (b: boolean) => void;\n    setWidth: (n: number) => void;\n}\n\nexport function App_Navbar({ setShow, setWidth }: App_Navbar_Inputs): JSX.Element {\n\n    //---------------------------Functions---------------------------\n\n    //Shows degree requirement panel\n    function showDegReqs(): void {\n        setShow(true);\n        setWidth(9);\n    }\n\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <>\n            <hr></hr>\n            <Nav variant=\"pills\" role=\"button\" className=\"flex-row text-center\">\n                <Col md={10}>\n                    <Row>\n                        <Nav.Item><Nav.Link eventKey=\"first\">Welcome and Help</Nav.Link></Nav.Item>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <Nav.Item><Nav.Link eventKey=\"second\">My Plan</Nav.Link></Nav.Item>\n                        </Col>\n                        <Col md={6}>\n                            <Nav.Item><Nav.Link eventKey=\"third\">Edit Plan</Nav.Link></Nav.Item>\n                        </Col>\n                    </Row>\n                </Col>\n                <Col md={2} className=\"text-center\">\n                    <Button variant=\"secondary\" onClick={() => showDegReqs()}>View Degree Requirements</Button>\n                </Col>\n            </Nav>\n            <hr></hr>\n        </>\n    );\n}","import React from \"react\";\nimport { Offcanvas } from \"react-bootstrap\";\n\n\ninterface Degree_Requirements_Inputs {\n    show: boolean;\n    setShow: (b: boolean) => void;\n    setWidth: (n: number) => void;\n}\n\nexport function DegreeRequirements_Section({ show, setShow, setWidth }: Degree_Requirements_Inputs): JSX.Element {\n\n    //---------------------------Functions---------------------------\n\n    //Hides degree requirement panel\n    function hideDegReqs(): void {\n        setShow(false);\n        setWidth(12);\n    }\n\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <Offcanvas show={show} placement=\"end\" scroll={true} backdrop={true} onHide={() => hideDegReqs()}>\n            <Offcanvas.Header closeButton>\n                <Offcanvas.Title>Degree Requirements</Offcanvas.Title>\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n                This will eventually be an active list. indicating which of the\n                degree requirements have been met by the current plan and which have not\n            </Offcanvas.Body>\n        </Offcanvas>\n    );\n}","import { Semester } from \"../interfaces/Semester\";\nimport { Course } from \"../interfaces/Course\";\n\n//Example Computer Science BS Classes (In the Order They Appear in the Example Plan)\nexport const example_courses: Course[] = [{ crsName: \"EGGG 101\", crsDescription: \"Introduction to Engineering\", crsCredits: 2, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"CISC 108\", crsDescription: \"Introduction to Somputer Science I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"MATH 241\", crsDescription: \"Analytic Geometry and Calculus A\", crsCredits: 4, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"ENGL 110\", crsDescription: \"Seminar in Composition\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 }, { crsName: \"Breadth Req. I\", crsDescription: \"Breadth Requirement Elective (1/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 1 },\n    { crsName: \"CISC 181\", crsDescription: \" Introduction to Computer Science II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"MATH 242\", crsDescription: \"Analytic Geometry & Calculus B\", crsCredits: 4, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"CISC 210\", crsDescription: \"Introduction to Systems Programming\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"Laboratory Science I\", crsDescription: \"Laboratory Science (1/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 2 }, { crsName: \"Breadth Req. II\", crsDescription: \"Breadth Requirement Elective (2/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 2 },\n    { crsName: \"CISC 220\", crsDescription: \"Data Structures\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"CISC 260\", crsDescription: \"Machine Org. & Assembly Language\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"MATH 210\", crsDescription: \"Discrete Mathematics I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"Laboratory Science II\", crsDescription: \"Laboratory Science (2/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 3 }, { crsName: \"Breadth Req. III\", crsDescription: \"Breadth Requirement Elective (3/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 3 },\n    { crsName: \"CISC 355\", crsDescription: \"Computers, Ethics & Society\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"CISC 275\", crsDescription: \"Introduction to Software Engineering\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"MATH 205\", crsDescription: \"Statistical Methods\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"Laboratory Science III\", crsDescription: \"Laboratory Science (3/3)\", crsCredits: 4, crsPrereqs:\"\", semester_number: 4 }, { crsName: \"Breadth Req. IV\", crsDescription: \"Breadth Requirement Elective (4/5)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 4 },\n    { crsName: \"CISC 320\", crsDescription: \"Introduction to Algorithms\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"CISC 361\", crsDescription: \"Operating Systems\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"CISC 304\", crsDescription: \"Logic and Programming\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"Concentration Elective I\", crsDescription: \"Concentration Elective (1/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 }, { crsName: \"General Elective I\", crsDescription: \"General Elective (1/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 5 },\n    { crsName: \"CISC 372\", crsDescription: \"Parallel Computing\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"CISC 303\", crsDescription: \"Automata Theory\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"ENGL 312\", crsDescription: \"Written Communication in Business\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"Concentration Elective II\", crsDescription: \"Concentration Elective (2/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 }, { crsName: \"General Elective II\", crsDescription: \"General Elective (2/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 6 },\n    { crsName: \"CISC 498\", crsDescription: \"Computer Science Design Project I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective I\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"Concentration Elective III\", crsDescription: \"Concentration Elective (3/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"General Elective III\", crsDescription: \"General Elective (3/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 }, { crsName: \"General Elective IV\", crsDescription: \"General Elective (4/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 7 },\n    { crsName: \"CISC 499\", crsDescription: \"Computer Science Design Project II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"CISC 3XX\", crsDescription: \"Computer Science Elective II\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"Concentration Elective IV\", crsDescription: \"Concentration Elective (4/4)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"General Elective V\", crsDescription: \"General Elective (5/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }, { crsName: \"General Elective VI\", crsDescription: \"General Elective (6/6)\", crsCredits: 3, crsPrereqs:\"\", semester_number: 8 }];\n\n//Example Computer Science BS Semesters (Chronological Order)\nconst example_semester1: Semester = { course_set: [example_courses[0], example_courses[1], example_courses[2], example_courses[3], example_courses[4]], semester_number: 1, credits: 15 };\nconst example_semester2: Semester = { course_set: [example_courses[5], example_courses[6], example_courses[7], example_courses[8], example_courses[9]], semester_number: 2, credits: 17 };\nconst example_semester3: Semester = { course_set: [example_courses[10], example_courses[11], example_courses[12], example_courses[13], example_courses[14]], semester_number: 3, credits: 16 };\nconst example_semester4: Semester = { course_set: [example_courses[15], example_courses[16], example_courses[17], example_courses[18], example_courses[19]], semester_number: 4, credits: 16 };\nconst example_semester5: Semester = { course_set: [example_courses[20], example_courses[21], example_courses[22], example_courses[23], example_courses[24]], semester_number: 5, credits: 15 };\nconst example_semester6: Semester = { course_set: [example_courses[25], example_courses[26], example_courses[27], example_courses[28], example_courses[29]], semester_number: 6, credits: 15 };\nconst example_semester7: Semester = { course_set: [example_courses[30], example_courses[31], example_courses[32], example_courses[33], example_courses[34]], semester_number: 7, credits: 15 };\nconst example_semester8: Semester = { course_set: [example_courses[35], example_courses[36], example_courses[37], example_courses[38], example_courses[39]], semester_number: 8, credits: 15 };\n\n//Example Computer Science BS Plan\nexport const ExamplePlan: Semester[] = [example_semester1, example_semester2, example_semester3, example_semester4, example_semester5, example_semester6, example_semester7, example_semester8];","import React, { useEffect, useState } from \"react\";\n\nexport default function ScrollToTop() :JSX.Element{\n    const [isVisible, setIsVisible] = useState(false);\n  \n    // Show button when page is scorlled upto given distance\n    const toggleVisibility = () => {\n        if (window.pageYOffset > 300) {\n            setIsVisible(true);\n        } else {\n            setIsVisible(false);\n        }\n    };\n    \n    // Set the top cordinate to 0\n    // make scrolling smooth\n    const scrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        });\n    };\n    \n    useEffect(() => {\n        window.addEventListener(\"scroll\", toggleVisibility);\n    }, []);\n    \n    return (\n        <div className=\"scroll-to-top\">\n            {isVisible && \n            <div onClick={scrollToTop}>\n                <img src='https://i.postimg.cc/44Ytsk8Z/top-arrow-emoj.png' alt='Go to top'/>\n            </div>}\n        </div>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/logo.4f3a436c.png\";","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport React, { useState } from \"react\";\nimport { Tab, Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { WelcomeAndHelp_Pane } from \"./components/WelcomeAndHelp_Pane\";\nimport { MyPlan_Pane } from \"./components/MyPlan_Pane\";\nimport { EditSemesters_Pane } from \"./components/EditSemesters_Pane\";\nimport { App_Navbar } from \"./components/App_Navbar\";\nimport { DegreeRequirements_Section } from \"./components/DegreeRequirements_Section\";\nimport { Semester } from \"./interfaces/Semester\";\nimport { ExamplePlan } from \"./assets/ExamplePlan\";\nimport ScrollToTopBtn from \"./components/gotToTop\";\nimport logo from \"./logo.png\";\n\nfunction App(): JSX.Element {\n\n    //---------------------------Constants---------------------------\n    //List of semesters in users plan\n    const [userSemesters, updateSemesters] = useState<Semester[]>(ExamplePlan);\n\n    //Used to show/hide degree requirements and resize main content\n    const [DegreeReq_View_State, toggleDegreeReqView] = useState(false);\n    const [app_Content_Width, setAppContentWidth] = useState(12);\n\n    //Help button toast message\n    const notify = () => toast(\"Go to the 'Welcome and Help' Page to see instructions and clear up any confusion you may have\");\n\n    //---------------------------Return Statement---------------------------\n    return (\n        <div className=\"App\">\n\n            <header className=\"App-header\">\n                <h1 className=\"mt-4\">UD CIS Scheduler</h1>\n            </header>\n\n            <div className=\"text-left\"><img className=\"logo\" src={logo} alt=\"Logo\" /></div>\n\n            <div className=\"help\">\n                <button className=\"btn-sm btn-info\" onClick={notify}>Help</button>\n                <ToastContainer />\n            </div>\n\n            <Col md={app_Content_Width}>\n\n                <DegreeRequirements_Section show={DegreeReq_View_State} setShow={toggleDegreeReqView} setWidth={setAppContentWidth} />\n\n                <Tab.Container defaultActiveKey=\"first\">\n\n                    <App_Navbar setShow={toggleDegreeReqView} setWidth={setAppContentWidth} />\n\n                    <Tab.Content>\n                        <Tab.Pane eventKey=\"first\"> <WelcomeAndHelp_Pane /> </Tab.Pane>\n\n                        <Tab.Pane data-testid=\"myPlan\" eventKey=\"second\"> <MyPlan_Pane userSemesters={userSemesters} updateSemesters={updateSemesters} /> </Tab.Pane>\n\n                        <Tab.Pane data-testid=\"editPlan\" eventKey=\"third\"> <EditSemesters_Pane userSemesters={userSemesters} updateSemesters={updateSemesters} /> </Tab.Pane>\n\n                        <ScrollToTopBtn />\n\n                    </Tab.Content>\n                    \n                </Tab.Container>\n            </Col>\n\n\n        </div>\n\n    );\n}\n\nexport default App;","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}